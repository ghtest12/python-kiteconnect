#This script checks the Bollinger Bands Strategies and Trend Trading Strategies
#This will produce an HTML file with all the images
#Plan is to run this script at the end of the day after the market is closed

import datetime
import pandas as pd
import numpy as np
print("",datetime.datetime.now(),"\n")

#The following will return the moving average
def MovingAverage(stock_price,ma_range = 7):
    ma = stock_price.rolling(ma_range).mean()
    return ma

#The following two functions are for slow moving stochastic %K and $D
#Return %K
def STOK(close, low, high, n): 
 STOK = ((close - recorddf['low'].rolling(window=n).min()) / (recorddf['high'].rolling(window=n).max() - recorddf['low'].rolling(window=n).min())) * 100
 STOK = STOK.rolling(3).mean()
 return STOK

#Return %D
def STOD(close, low, high, n):
 STOK = ((close - recorddf['low'].rolling(window=n).min()) / (recorddf['high'].rolling(window=n).max() - recorddf['low'].rolling(window=n).min())) * 100
 STOK = STOK.rolling(3).mean()
 STOD = STOK.rolling(3).mean()
 return STOD

#The following functions returns
def Bolinger_Bands(stock_price, window_size=20, num_of_std=2):
    rolling_mean = stock_price.rolling(window=window_size).mean()
    rolling_std  = stock_price.rolling(window=window_size).std()
    upper_band = rolling_mean + (rolling_std*num_of_std)
    lower_band = rolling_mean - (rolling_std*num_of_std)

    return rolling_mean, upper_band, lower_band

#The following function takes screenshots of the stocks found
#Input is the list of lists and instrument codes list for different stocks
import webbrowser
import os
import time
import pyautogui
def getScreenshots(dict_stocks_found, instruments_codes):
    nowstr = datetime.datetime.now().strftime ("%Y%m%d")
    mypath = 'D:\\strategies\\'+nowstr 
    if not os.path.isdir(mypath):
       os.makedirs(mypath)
    url = "https://kite.zerodha.com/chart/NSE/ACC/5633"
    webbrowser.open(url)
    time.sleep(3)
    for stock_list_name,stock_list in dict_stocks_found.items():
        stock_list_path = mypath+"\\"+stock_list_name
        if not os.path.isdir(stock_list_path):
            os.makedirs(stock_list_path)
        for stock_name in stock_list:
            os.chdir(stock_list_path)
            instr_code = instruments_codes[stock_name]
            url = "https://kite.zerodha.com/chart/NSE/"+stock_name+"/"+instr_code
            pyautogui.hotkey('alt', 'd')
            pyautogui.typewrite(url, interval=0.01)
            pyautogui.press('enter')
            time.sleep(3)
            pic = pyautogui.screenshot(region=(600,200, 1300, 800))
            pic.save(stock_name+nowstr+'.png')
            time.sleep(1)
    os.system("taskkill /f /im "+"chrome.exe")

def createHTML(dict_stocks_found, desc_stocks_lists, instruments_codes):
    nowstr = datetime.datetime.now().strftime ("%Y%m%d")
    mypath = 'D:\\strategies\\'+nowstr
    f = open(mypath+'/helloworld.html','w')
    #f = open('helloworld.html','w')
    message = """<html>
                <head></head>
                <body>"""
    for stock_list_name,stock_list in dict_stocks_found.items():
        stock_list_path = mypath+"\\"+stock_list_name
        stock_list_desc = desc_stocks_lists[stock_list_name]
        message += "<h3>"+stock_list_desc+" ("+str(len(stock_list))+")"+":</h3>"
        if(len(stock_list) <= 0):
            message += "No stocks found meeting this condition.</br>\n"
        if(len(stock_list) > 0):
            for stock_name in stock_list:
                instr_code = instruments_codes[stock_name]
                url = "https://kite.zerodha.com/chart/NSE/"+stock_name+"/"+instr_code
                image_name = stock_name+nowstr+'.png'
                image_url = stock_list_path+"/"+image_name
                
                message += "<h4><a href='"+url+"' target='_new'>"+stock_name+"</a>:</h4>"
                message += "<img src='"+image_url+"' width='50%'></img></br>"
                
    message += "</body></html>"
    f.write(message)
    f.close()
#BSE
#dict_codes = {'ACC':'128104964','ADANIENT':'131225348','ADANIPORTS':'136427780','ADANIPOWER':'136472580','AJANTPHARM':'136276740','ALBK':'136314884','AMARAJABAT':'128002052','AMBUJACEM':'128108804','ANDHRABANK':'136299012','APOLLOHOSP':'130270468','APOLLOTYRE':'128224516','ARVIND':'128025860','ASHOKLEY':'128122116','ASIANPAINT':'128209924','AUROPHARMA':'134349828','AXISBANK':'136247044','BAJAJ-AUTO':'136442116','BAJAJFINSV':'136442372','BAJFINANCE':'128008708','BALKRISIND':'128602884','BALRAMCHIN':'128009732','BANKBARODA':'136226308','BANKINDIA':'136230148','BATAINDIA':'128011012','BEL':'128012548','BEML':'128012292','BERGEPAINT':'130426884','BHARATFIN':'136506372','BHARATFORG':'128126212','BHARTIARTL':'136308228','BHEL':'128026372','BIOCON':'136325892','BOSCHLTD':'128135684','BPCL':'128140036','BRITANNIA':'128211204','CADILAHC':'136274180','CANBK':'136315652','CANFINHOME':'130866180','CAPF':'136432132','CASTROLIND':'128222724','CEATLTD':'128224772','CENTURYTEX':'128010244','CESC':'128021508','CGPOWER':'128023812','CHENNPETRO':'128028164','CHOLAFIN':'130878212','CIPLA':'128022276','COALINDIA':'136519172','COLPAL':'128212484','CONCOR':'136024068','CUMMINSIND':'128122884','DABUR':'128024580','DALMIABHA':'136527108','DCBBANK':'136389636','DHFL':'130834436','DISHTV':'136406788','DIVISLAB':'136316932','DLF':'136414212','DRREDDY':'128031748','EICHERMOT':'129331204','ENGINERSIN':'136237572','EQUITAS':'138200068','ESCORTS':'128126724','EXIDEIND':'128022020','FEDERALBNK':'128120068','GAIL':'136231684','GLENMARK':'136267780','GMRINFRA':'136385028','GODFRYPHLP':'128041732','GODREJCP':'136300548','GODREJIND':'128041988','GRANULES':'136315396','GRASIM':'128076804','GSFC':'128176644','HAVELLS':'132442628','HCC':'128047364','HCLTECH':'136263940','HDFC':'128002564','HDFCBANK':'128046084','HEROMOTOCO':'128046596','HEXAWARE':'136225028','HINDALCO':'128112644','HINDPETRO':'128026628','HINDUNILVR':'128178180','HINDZINC':'128048132','IBULHSGFIN':'137161988','ICICIBANK':'136236548','ICICIPRULI':'138274052','IDBI':'128029700','IDEA':'136402436','IDFC':'136360708','IDFCBANK':'138095876','IFCI':'128027140','IGL':'136323588','INDIACEM':'135681284','INDIANB':'136400388','INDIGO':'138098692','INDUSINDBK':'136239876','INFIBEAM':'138190596','INFRATEL':'136912900','INFY':'128053508','IOC':'135927044','IRB':'136434436','ITC':'128224004','JETAIRWAYS':'136349956','JINDALSTEL':'136265220','JISLJALEQS':'128056068','JPASSOCIAT':'136328196','JSWSTEEL':'128058372','JUBLFOOD':'136487684','JUSTDIAL':'137125892','KAJARIACER':'128059652','KOTAKBANK':'128063236','KPIT':'136294404','KSCL':'136422148','KTKBANK':'136358916','L&TFH':'136580868','LICHSGFIN':'128064772','LT':'128130564','LUPIN':'128065796','M&M':'128133124','M&MFIN':'136376324','MANAPPURAM':'135990532','MARICO':'136100356','MARUTI':'136320004','MCX':'136727300','MFSL':'128069380','MGL':'138228996','MINDTREE':'136401668','MOTHERSUMI':'132437508','MRF':'128074244','MRPL':'128027908','MUTHOOTFIN':'136549892','NATIONALUM':'136251908','NBCC':'136783108','NCC':'128075268','NESTLEIND':'128202244','NHPC':'136473092','NIITTECH':'136330500','NMDC':'134750980','NTPC':'136334084','OFSS':'136311300','OIL':'136475140','ONGC':'128079876','ORIENTBANK':'128080644','PAGEIND':'136403716','PCJEWELLER':'136911108','PEL':'128077316','PETRONET':'136325636','PFC':'136399364','PIDILITIND':'128084740','PNB':'136310020','POWERGRID':'136421892','PTC':'136326148','PVR':'136368388','RAMCOCEM':'128066564','RAYMOND':'128084484','RBLBANK':'138256644','RCOM':'136374276','RECLTD':'136436484','RELCAPITAL':'128028420','RELIANCE':'128083204','RELINFRA':'128099844','REPCOHOME':'137042436','RPOWER':'136432388','SAIL':'128028932','SBIN':'128028676','SHREECEM':'128099076','SIEMENS':'128140804','SOUTHBANK':'136247812','SREINFRA':'134081540','SRF':'128974340','SRTRANSFIN':'130871812','STAR':'136327940','SUNPHARMA':'134327044','SUNTV':'136379652','SUZLON':'136362756','SYNDIBANK':'136262660','TATACHEM':'128197124','TATACOMM':'128123652','TATAELXSI':'128104452','TATAGLOBAL':'128204804','TATAMOTORS':'128145924','TATAMTRDVR':'145920260','TATAPOWER':'128102404','TATASTEEL':'128120324','TCS':'136330244','TECHM':'136385284','TITAN':'128029188','TORNTPHARM':'128107524','TORNTPOWER':'136391428','TV18BRDCST':'136396804','TVSMOTOR':'136279812','UBL':'136314372','UJJIVAN':'138207748','ULTRACEMCO':'136329732','UNIONBANK':'136314116','UPL':'131089924','VEDL':'128075524','VGUARD':'136435972','VOLTAS':'128147204','WIPRO':'129967364','WOCKPHARMA':'136268804','YESBANK':'136357892','ZEEL':'129417476'}
#NSE
dict_codes = {'ACC':'5633','ADANIENT':'6401','ADANIPORTS':'3861249','ADANIPOWER':'4451329','AJANTPHARM':'2079745','ALBK':'2760193','AMARAJABAT':'25601','AMBUJACEM':'325121','ANDHRABANK':'2524673','APOLLOHOSP':'40193','APOLLOTYRE':'41729','ARVIND':'49409','ASHOKLEY':'54273','ASIANPAINT':'60417','AUROPHARMA':'70401','AXISBANK':'1510401','BAJAJ-AUTO':'4267265','BAJAJFINSV':'4268801','BAJFINANCE':'81153','BALKRISIND':'85761','BALRAMCHIN':'87297','BANKBARODA':'1195009','BANKINDIA':'1214721','BATAINDIA':'94977','BEL':'98049','BEML':'101121','BERGEPAINT':'103425','BHARATFIN':'4995329','BHARATFORG':'108033','BHARTIARTL':'2714625','BHEL':'112129','BIOCON':'2911489','BOSCHLTD':'558337','BPCL':'134657','BRITANNIA':'140033','CADILAHC':'2029825','CANBK':'2763265','CANFINHOME':'149249','CAPF':'3903745','CASTROLIND':'320001','CEATLTD':'3905025','CENTURYTEX':'160001','CESC':'160769','CGPOWER':'194561','CHENNPETRO':'524545','CHOLAFIN':'175361','CIPLA':'177665','COALINDIA':'5215745','COLPAL':'3876097','CONCOR':'1215745','CUMMINSIND':'486657','DABUR':'197633','DALMIABHA':'5444865','DCBBANK':'3513601','DHFL':'215553','DISHTV':'3721473','DIVISLAB':'2800641','DLF':'3771393','DRREDDY':'225537','EICHERMOT':'232961','ENGINERSIN':'1256193','EQUITAS':'4314113','ESCORTS':'245249','EXIDEIND':'173057','FEDERALBNK':'261889','GAIL':'1207553','GLENMARK':'1895937','GMRINFRA':'3463169','GODFRYPHLP':'302337','GODREJCP':'2585345','GODREJIND':'2796801','GRANULES':'3039233','GRASIM':'315393','GSFC':'319233','HAVELLS':'2513665','HCC':'352001','HCLTECH':'1850625','HDFC':'340481','HDFCBANK':'341249','HEROMOTOCO':'345089','HEXAWARE':'2747905','HINDALCO':'348929','HINDPETRO':'359937','HINDUNILVR':'356865','HINDZINC':'364545','IBULHSGFIN':'7712001','ICICIBANK':'1270529','ICICIPRULI':'4774913','IDBI':'377857','IDEA':'3677697','IDFC':'3060993','IDFCBANK':'2863105','IFCI':'381697','IGL':'2883073','INDIACEM':'387841','INDIANB':'3663105','INDIGO':'2865921','INDUSINDBK':'1346049','INFIBEAM':'4159745','INFRATEL':'7458561','INFY':'408065','IOC':'415745','IRB':'3920129','ITC':'424961','JETAIRWAYS':'2997505','JINDALSTEL':'1723649','JISLJALEQS':'2661633','JPASSOCIAT':'2933761','JSWSTEEL':'3001089','JUBLFOOD':'4632577','JUSTDIAL':'7670273','KAJARIACER':'462849','KOTAKBANK':'492033','KPIT':'1790465','KSCL':'3832833','KTKBANK':'2061825','L&TFH':'6386689','LICHSGFIN':'511233','LT':'2939649','LUPIN':'2672641','M&M':'519937','M&MFIN':'3400961','MANAPPURAM':'4879617','MARICO':'1041153','MARUTI':'2815745','MCDOWELL-N':'2674433','MCX':'7982337','MFSL':'548353','MGL':'4488705','MINDTREE':'3675137','MOTHERSUMI':'1076225','MRF':'582913','MRPL':'584449','MUTHOOTFIN':'6054401','NATIONALUM':'1629185','NBCC':'8042241','NCC':'593665','NESTLEIND':'4598529','NHPC':'4454401','NIITTECH':'2955009','NMDC':'3924993','NTPC':'2977281','OFSS':'2748929','OIL':'4464129','ONGC':'633601','ORIENTBANK':'636673','PAGEIND':'3689729','PCJEWELLER':'7455745','PEL':'617473','PETRONET':'2905857','PFC':'3660545','PIDILITIND':'681985','PNB':'2730497','POWERGRID':'3834113','PTC':'2906881','PVR':'3365633','RAMCOCEM':'523009','RAYMOND':'731905','RBLBANK':'4708097','RCOM':'3375873','RECLTD':'3930881','RELCAPITAL':'737793','RELIANCE':'738561','RELINFRA':'141569','REPCOHOME':'7577089','RPOWER':'3906305','SAIL':'758529','SBIN':'779521','SHREECEM':'794369','SIEMENS':'806401','SOUTHBANK':'1522689','SREINFRA':'836353','SRF':'837889','SRTRANSFIN':'1102337','STAR':'1887745','SUNPHARMA':'857857','SUNTV':'3431425','SUZLON':'3076609','SYNDIBANK':'1837825','TATACHEM':'871681','TATACOMM':'952577','TATAELXSI':'873217','TATAGLOBAL':'878593','TATAMOTORS':'884737','TATAMTRDVR':'4343041','TATAPOWER':'877057','TATASTEEL':'895745','TCS':'2953217','TECHM':'3465729','TITAN':'897537','TORNTPHARM':'900609','TORNTPOWER':'3529217','TV18BRDCST':'3637249','TVSMOTOR':'2170625','UBL':'4278529','UJJIVAN':'4369665','ULTRACEMCO':'2952193','UNIONBANK':'2752769','UPL':'2889473','VEDL':'784129','VGUARD':'3932673','VOLTAS':'951809','WIPRO':'969473','WOCKPHARMA':'1921537','YESBANK':'3050241','ZEEL':'975873'}
#dict_codes = {'ACC':'5633'}
#codes for links
links_codes = {'ACC':'5633','ADANIENT':'6401','ADANIPORTS':'3861249','ADANIPOWER':'4451329','AJANTPHARM':'2079745','ALBK':'2760193','AMARAJABAT':'25601','AMBUJACEM':'325121','ANDHRABANK':'2524673','APOLLOHOSP':'40193','APOLLOTYRE':'41729','ARVIND':'49409','ASHOKLEY':'54273','ASIANPAINT':'60417','AUROPHARMA':'70401','AXISBANK':'1510401','BAJAJ-AUTO':'4267265','BAJAJFINSV':'4268801','BAJFINANCE':'81153','BALKRISIND':'85761','BALRAMCHIN':'87297','BANKBARODA':'1195009','BANKINDIA':'1214721','BATAINDIA':'94977','BEL':'98049','BEML':'101121','BERGEPAINT':'103425','BHARATFIN':'4995329','BHARATFORG':'108033','BHARTIARTL':'2714625','BHEL':'112129','BIOCON':'2911489','BOSCHLTD':'558337','BPCL':'134657','BRITANNIA':'140033','CADILAHC':'2029825','CANBK':'2763265','CANFINHOME':'149249','CAPF':'3903745','CASTROLIND':'320001','CEATLTD':'3905025','CENTURYTEX':'160001','CESC':'160769','CGPOWER':'194561','CHENNPETRO':'524545','CHOLAFIN':'175361','CIPLA':'177665','COALINDIA':'5215745','COLPAL':'3876097','CONCOR':'1215745','CUMMINSIND':'486657','DABUR':'197633','DALMIABHA':'5444865','DCBBANK':'3513601','DHFL':'215553','DISHTV':'3721473','DIVISLAB':'2800641','DLF':'3771393','DRREDDY':'225537','EICHERMOT':'232961','ENGINERSIN':'1256193','EQUITAS':'4314113','ESCORTS':'245249','EXIDEIND':'173057','FEDERALBNK':'261889','GAIL':'1207553','GLENMARK':'1895937','GMRINFRA':'3463169','GODFRYPHLP':'302337','GODREJCP':'2585345','GODREJIND':'2796801','GRANULES':'3039233','GRASIM':'315393','GSFC':'319233','HAVELLS':'2513665','HCC':'352001','HCLTECH':'1850625','HDFC':'340481','HDFCBANK':'341249','HEROMOTOCO':'345089','HEXAWARE':'2747905','HINDALCO':'348929','HINDPETRO':'359937','HINDUNILVR':'356865','HINDZINC':'364545','IBULHSGFIN':'7712001','ICICIBANK':'1270529','ICICIPRULI':'4774913','IDBI':'377857','IDEA':'3677697','IDFC':'3060993','IDFCBANK':'2863105','IFCI':'381697','IGL':'2883073','INDIACEM':'387841','INDIANB':'3663105','INDIGO':'2865921','INDUSINDBK':'1346049','INFIBEAM':'4159745','INFRATEL':'7458561','INFY':'408065','IOC':'415745','IRB':'3920129','ITC':'424961','JETAIRWAYS':'2997505','JINDALSTEL':'1723649','JISLJALEQS':'2661633','JPASSOCIAT':'2933761','JSWSTEEL':'3001089','JUBLFOOD':'4632577','JUSTDIAL':'7670273','KAJARIACER':'462849','KOTAKBANK':'492033','KPIT':'1790465','KSCL':'3832833','KTKBANK':'2061825','L&TFH':'6386689','LICHSGFIN':'511233','LT':'2939649','LUPIN':'2672641','M&M':'519937','M&MFIN':'3400961','MANAPPURAM':'4879617','MARICO':'1041153','MARUTI':'2815745','MCDOWELL-N':'2674433','MCX':'7982337','MFSL':'548353','MGL':'4488705','MINDTREE':'3675137','MOTHERSUMI':'1076225','MRF':'582913','MRPL':'584449','MUTHOOTFIN':'6054401','NATIONALUM':'1629185','NBCC':'8042241','NCC':'593665','NESTLEIND':'4598529','NHPC':'4454401','NIITTECH':'2955009','NMDC':'3924993','NTPC':'2977281','OFSS':'2748929','OIL':'4464129','ONGC':'633601','ORIENTBANK':'636673','PAGEIND':'3689729','PCJEWELLER':'7455745','PEL':'617473','PETRONET':'2905857','PFC':'3660545','PIDILITIND':'681985','PNB':'2730497','POWERGRID':'3834113','PTC':'2906881','PVR':'3365633','RAMCOCEM':'523009','RAYMOND':'731905','RBLBANK':'4708097','RCOM':'3375873','RECLTD':'3930881','RELCAPITAL':'737793','RELIANCE':'738561','RELINFRA':'141569','REPCOHOME':'7577089','RPOWER':'3906305','SAIL':'758529','SBIN':'779521','SHREECEM':'794369','SIEMENS':'806401','SOUTHBANK':'1522689','SREINFRA':'836353','SRF':'837889','SRTRANSFIN':'1102337','STAR':'1887745','SUNPHARMA':'857857','SUNTV':'3431425','SUZLON':'3076609','SYNDIBANK':'1837825','TATACHEM':'871681','TATACOMM':'952577','TATAELXSI':'873217','TATAGLOBAL':'878593','TATAMOTORS':'884737','TATAMTRDVR':'4343041','TATAPOWER':'877057','TATASTEEL':'895745','TCS':'2953217','TECHM':'3465729','TITAN':'897537','TORNTPHARM':'900609','TORNTPOWER':'3529217','TV18BRDCST':'3637249','TVSMOTOR':'2170625','UBL':'4278529','UJJIVAN':'4369665','ULTRACEMCO':'2952193','UNIONBANK':'2752769','UPL':'2889473','VEDL':'784129','VGUARD':'3932673','VOLTAS':'951809','WIPRO':'969473','WOCKPHARMA':'1921537','YESBANK':'3050241','ZEEL':'975873'}

#Create Blank Lists for different strategies
#Upper Bollinger Bands Breakout
upper_bb_breakout = []
#Lower Bollinger Bands Breakout
lower_bb_breakout = []
#Bollinger Bands Converging but Candle Open and Close are above the Upper Bollinger Bands
bb_conv_candle_oc_above_ubb = []
#Bollinger Bands Converging but Candle Open and Close are below the Lower Bollinger Bands
bb_conv_candle_oc_below_lbb = []
#BBs Converging but Candle Close is above the Upper Bollinger Bands
bb_conv_candle_close_above_ubb = []
#BBs Converging but Candle Close is below the lower Bollinger Bands
bb_conv_candle_close_below_lbb = []
#BBs are NOT converging but Candle Open and Close are above the Upper Bollinger Bands
bb_not_conv_candle_oc_above_ubb = []
#BBs are NOT converging but Candle Open and Close are below the Lower Bollinger Bands
bb_not_conv_candle_oc_below_lbb = []
#BBs are NOT converging but Candle Close is above the Upper Bollinger Bands
bb_not_conv_candle_close_above_ubb = []
#BBs are NOT converging but Candle Close is below the Lower Bollinger Bands
bb_not_conv_candle_close_below_lbb = []

#Strong uptrend but candle cosed below 7MA
strong_uptrend_stocks_closed_below_7MA = []
#Uptrend but candle closed below 7MA
uptrend_stocks_closed_below_7MA = []
#Strong downtrend but candle closed above 7MA
strong_downtrend_stocks_closed_above_7MA = []
#Downtrend but candle closed above 7MA
downtrend_stocks_closed_above_7MA = []
#Store the strong uptrend stocks
strong_uptrend_stocks = []
#Store the uptrend stocks
uptrend_stocks = []
#Store the strong downtrend stocks
strong_downtrend_stocks = []
#Store downtrend stocks
downtrend_stocks = []
#Store uptrend settled stocks
uptrend_settled_stocks = []
#Store downtrend settled stocks
downtrend_settled_stocks = []
#Store range trading stocks
range_stocks = []

#list_stocks_found_names = ['upper_bb_breakout','lower_bb_breakout','bb_conv_candle_oc_above_ubb','bb_conv_candle_oc_below_lbb','bb_conv_candle_close_above_ubb','bb_conv_candle_close_below_lbb','bb_not_conv_candle_oc_above_ubb','bb_not_conv_candle_oc_below_lbb','bb_not_conv_candle_close_above_ubb','bb_not_conv_candle_close_below_lbb','strong_uptrend_stocks_closed_below_7MA','uptrend_stocks_closed_below_7MA','strong_downtrend_stocks_closed_above_7MA','downtrend_stocks_closed_above_7MA','strong_uptrend_stocks','uptrend_stocks','strong_downtrend_stocks','downtrend_stocks','uptrend_settled_stocks','downtrend_settled_stocks','range_stocks']
#list_stocks_found = [upper_bb_breakout,lower_bb_breakout,bb_conv_candle_oc_above_ubb,bb_conv_candle_oc_below_lbb,bb_conv_candle_close_above_ubb,bb_conv_candle_close_below_lbb,bb_not_conv_candle_oc_above_ubb,bb_not_conv_candle_oc_below_lbb,bb_not_conv_candle_close_above_ubb,bb_not_conv_candle_close_below_lbb,strong_uptrend_stocks_closed_below_7MA,uptrend_stocks_closed_below_7MA,strong_downtrend_stocks_closed_above_7MA,downtrend_stocks_closed_above_7MA,strong_uptrend_stocks,uptrend_stocks,strong_downtrend_stocks,downtrend_stocks,uptrend_settled_stocks,downtrend_settled_stocks,range_stocks]
dict_stocks_found = {'upper_bb_breakout':upper_bb_breakout,'lower_bb_breakout':lower_bb_breakout,'bb_conv_candle_oc_above_ubb':bb_conv_candle_oc_above_ubb,'bb_conv_candle_oc_below_lbb':bb_conv_candle_oc_below_lbb,'bb_conv_candle_close_above_ubb':bb_conv_candle_close_above_ubb,'bb_conv_candle_close_below_lbb':bb_conv_candle_close_below_lbb,'bb_not_conv_candle_oc_above_ubb':bb_not_conv_candle_oc_above_ubb,'bb_not_conv_candle_oc_below_lbb':bb_not_conv_candle_oc_below_lbb,'bb_not_conv_candle_close_above_ubb':bb_not_conv_candle_close_above_ubb,'bb_not_conv_candle_close_below_lbb':bb_not_conv_candle_close_below_lbb,'strong_uptrend_stocks_closed_below_7MA':strong_uptrend_stocks_closed_below_7MA,'uptrend_stocks_closed_below_7MA':uptrend_stocks_closed_below_7MA,'strong_downtrend_stocks_closed_above_7MA':strong_downtrend_stocks_closed_above_7MA,'downtrend_stocks_closed_above_7MA':downtrend_stocks_closed_above_7MA,'strong_uptrend_stocks':strong_uptrend_stocks,'uptrend_stocks':uptrend_stocks,'strong_downtrend_stocks':strong_downtrend_stocks,'downtrend_stocks':downtrend_stocks,'uptrend_settled_stocks':uptrend_settled_stocks,'downtrend_settled_stocks':downtrend_settled_stocks,'range_stocks':range_stocks}
desc_stocks_lists = {'upper_bb_breakout':'Upper Bollinger Bands Breakout','lower_bb_breakout':'Lower Bollinger Bands Breakout','bb_conv_candle_oc_above_ubb':'Bollinger Bands Converging But Candlestick Open and Close above the Upper Bollinger Bands','bb_conv_candle_oc_below_lbb':'Bollinger Bands Converging but Candlestick Open and Close are below the Lower Bollinger Bands','bb_conv_candle_close_above_ubb':'Bollinger Bands Converging but Candlestick Close is above the Upper Bollinger Bands','bb_conv_candle_close_below_lbb':'Bollinger Bands Converging but Candlestick Close is below the Lower Bollinger Bands','bb_not_conv_candle_oc_above_ubb':'Bollinger Bands not Converging but Candlestick Open and Close are above the Upper Bollinger Bands','bb_not_conv_candle_oc_below_lbb':'Bollinger Bands Not Converging but Candlestick Open and Close are Below the Lower Bollinger Bands','bb_not_conv_candle_close_above_ubb':'Bollinger Bands not Converging but Candlestick Close is above the Upper Bollinger Bands','bb_not_conv_candle_close_below_lbb':'Bollinger Bands not Converging but Candlestick Close is Below the Lower Bollinger Bands','strong_uptrend_stocks_closed_below_7MA':'Strong Uptrend Stocks but Candlestick Closed Below the 7MA','uptrend_stocks_closed_below_7MA':'Normal Uptrend Stocks but Candlestick Closed Below the 7MA','strong_downtrend_stocks_closed_above_7MA':'Strong Downtrend Stocks but Candlestick Closed above the 7MA','downtrend_stocks_closed_above_7MA':'Normal Downtrend Stocks but Candlestick Closed above 7MA','strong_uptrend_stocks':'Strong Uptrend Stocks','uptrend_stocks':'Normal Uptrend Stocks','strong_downtrend_stocks':'Strong Downtrend Stocks','downtrend_stocks':'Downtrend Stocks','uptrend_settled_stocks':'Uptrend Settled Stocks','downtrend_settled_stocks':'Downtrend Settled Stocks','range_stocks':'Range Market Stocks'}
#List for holding timed out stocks
timed_out = []

for codekey,codeval in dict_codes.items():
    try:
        records = kite.historical_data(codeval, "2018-05-16", "2018-08-21", "day")
    except Exception as e:
        try:
            records = kite.historical_data(codeval, "2018-05-16", "2018-08-21", "day")
        except Exception as e:
            try:
                records = kite.historical_data(codeval, "2018-05-16", "2018-08-21", "day")
            except Exception as e:
                print("Third timeout occured for ", codekey)
                timed_out.append(codekey)
                continue
    recorddf = pd.DataFrame(records)
    
    #--------------------------Get Different Indicators----------------------------
    #Get the Stochastics
    recorddf['%K'] = STOK(recorddf['close'], recorddf['low'], recorddf['high'], 14)
    recorddf['%D'] = STOD(recorddf['close'], recorddf['low'], recorddf['high'], 14)
    
    #Get the Bollinger Bands middle band, upper band and lower band
    recorddf['middle_band'],recorddf['upper_band'],recorddf['lower_band'] = Bolinger_Bands(recorddf['close'])
    
    #Get the Upper Bollinger Band differences
    recorddf['upper_boll_diff'] = recorddf['upper_band'].diff()
    
    #Get the Lower Bollinger Band differences
    recorddf['lower_boll_diff'] = recorddf['lower_band'].diff()
    
    #Get the moving averages
    recorddf['ma'] = MovingAverage(recorddf['close'])
    
    #Get the moving average differences
    recorddf['ma_diff'] = recorddf['ma'].diff()
    #----------------------Close of Different Indicators---------------------------
    
    #Get today's open, close, high and low
    today_open = recorddf[['open']].tail(1).iloc[0]['open']
    today_close = recorddf[['close']].tail(1).iloc[0]['close']
    today_high = recorddf[['high']].tail(1).iloc[0]['high']
    today_low = recorddf[['low']].tail(1).iloc[0]['low']

    #-------------------Bollinger Bands Strategies--------------------------
    
    upper_bb3 = recorddf[['upper_band']].tail(3).iloc[0]['upper_band']
    upper_bb2 = recorddf[['upper_band']].tail(2).iloc[0]['upper_band']
    upper_bb1 = recorddf[['upper_band']].tail(1).iloc[0]['upper_band']
    
    lower_bb3 = recorddf[['lower_band']].tail(3).iloc[0]['lower_band']
    lower_bb2 = recorddf[['lower_band']].tail(2).iloc[0]['lower_band']
    lower_bb1 = recorddf[['lower_band']].tail(1).iloc[0]['lower_band']
    
    if((upper_bb3 >= upper_bb2 and upper_bb2 < upper_bb1) and (lower_bb3 <= lower_bb2 and lower_bb2 > lower_bb1) and today_close > upper_bb1):
        upper_bb_breakout.append(codekey)
    elif((upper_bb3 >= upper_bb2 and upper_bb2 < upper_bb1) and (lower_bb3 <= lower_bb2 and lower_bb2 > lower_bb1) and today_close < lower_bb1):
        lower_bb_breakout.append(codekey)
    elif((upper_bb3 > upper_bb2 > upper_bb1) and (lower_bb3 < lower_bb2 < lower_bb1) and today_open > upper_bb1 and today_close > upper_bb1):
        bb_conv_candle_oc_above_ubb.append(codekey)
    elif((upper_bb3 > upper_bb2 > upper_bb1) and (lower_bb3 < lower_bb2 < lower_bb1) and today_open < lower_bb1 and today_close < lower_bb1):
        bb_conv_candle_oc_below_lbb.append(codekey)
    elif((upper_bb3 > upper_bb2 > upper_bb1) and (lower_bb3 < lower_bb2 < lower_bb1) and today_close > upper_bb1):
        bb_conv_candle_close_above_ubb.append(codekey)
    elif((upper_bb3 > upper_bb2 > upper_bb1) and (lower_bb3 < lower_bb2 < lower_bb1) and today_close < lower_bb1):
        bb_conv_candle_close_below_lbb.append(codekey)
    elif(today_open > upper_bb1 and today_close > upper_bb1):
        bb_not_conv_candle_oc_above_ubb.append(codekey)
    elif(today_open < lower_bb1 and today_close < lower_bb1):
        bb_not_conv_candle_oc_below_lbb.append(codekey)
    elif(today_close > upper_bb1):
        bb_not_conv_candle_close_above_ubb.append(codekey)
    elif(today_close < lower_bb1):
        bb_not_conv_candle_close_below_lbb.append(codekey)
    #-----------------------------Close of Bollinger Bands Strategies------------------

    #-----------------------------Finding Trends-----------------------------------------------
    #The following will find whether the stock is in Strong Uptrend or Uptrend or Strong Downtrend or Downtrend or 
    #Uptrend Settled or Downtrend Settled or Range Market
    
    #Get the Average Height of The Candlestick
    no_candles_to_check = 10
    if(no_candles_to_check < len(recorddf.index)):
        total_highs = (recorddf[['high']].tail(no_candles_to_check).sum()).iloc[0]
        total_lows = (recorddf[['low']].tail(no_candles_to_check).sum()).iloc[0]
        avg_candle_length = (total_highs-total_lows)/no_candles_to_check
    else:
        print("The number of candlesticks you want to check are greater than the records available")
        print("No. of candles you are checking for average candle height: ",no_candles_to_check)
        print("Total records available: ",len(recorddf.index))
        break
    
    #Calculate the moving average difference value (by multiplying with 0.176) to check the trend
    mavaluepos = avg_candle_length * 0.176
    mavalueneg = -1 * mavalpos
    
    #Check if the last 11 MA differences are positive or not
    allmadiffpositive = False
    allmadiffnegative = False
    if(((recorddf[['ma_diff']].tail(11) < 0).any(axis=None)).iloc[0] == False):
        allmadiffpositive = True
    elif(((recorddf[['ma_diff']].tail(11) > 0).any(axis=None)).iloc[0] == False):
        allmadiffnegative = True
    
    pattern = []
    patternvalue = 0
    checkpoint = 0
    if(allmadiffpositive and recorddf[['ma_diff']].tail(1).iloc[0]['ma_diff'] > mavaluepos):
        strong_uptrend_stocks.append(codekey)
        if(today_close < recorddf[['ma']].tail(1).iloc[0]['ma']):
            strong_uptrend_stocks_closed_below_7MA.append(codekey)
    elif(allmadiffpositive and recorddf[['ma_diff']].tail(1).iloc[0]['ma_diff'] < mavaluepos):
        uptrend_stocks.append(codekey)
        if(today_close < recorddf[['ma']].tail(1).iloc[0]['ma']):
            uptrend_stocks_closed_below_7MA.append(codekey)

    if(allmadiffnegative and recorddf[['ma_diff']].tail(1).iloc[0]['ma_diff'] < mavalueneg):
        strong_downtrend_stocks.append(codekey)
        if(today_close > recorddf[['ma']].tail(1).iloc[0]['ma']):
            strong_downtrend_stocks_closed_above_7MA.append(codekey)
    elif(allmadiffnegative and recorddf[['ma_diff']].tail(1).iloc[0]['ma_diff'] > mavalueneg):
        downtrend_stocks.append(codekey)
        if(today_close > recorddf[['ma']].tail(1).iloc[0]['ma']):
            downtrend_stocks_closed_above_7MA.append(codekey)
    else:
        for index,maval_diff in recorddf[['ma_diff']].tail(10).iterrows():   
            if(maval_diff['ma_diff'] > mavaluepos):
                patternvalue = 1
            elif(maval_diff['ma_diff'] < mavaluepos and maval_diff['ma_diff'] > mavalueneg):
                patternvalue = 0
            elif(maval_diff['ma_diff'] < mavalueneg):
                patternvalue = -1
            if(checkpoint == 0):
                pattern.append(patternvalue)
            if(checkpoint >= 1):
                if(pattern[-1] != patternvalue):
                    pattern.append(patternvalue)
            checkpoint += 1
            
        if(pattern == [1,0]):
            uptrend_settled_stocks.append(codekey)
        elif(pattern == [-1,0]):
            downtrend_settled_stocks.append(codekey)
        elif(pattern == [0]):
            range_stocks.append(codekey)

         
    #--------------------------Close Finding Trends---------------------------
    #dvalue = recorddf[['%K','%D']].tail(1).iloc[0]['%D']
    
    
    
    #if(today_close > upper_bb1):
        #print(codekey,": Closed above the bollinger bands")
    
    #if(today_close < lower_bb1):
        #print(codekey,": Closed lower the bollinger bands")
        
    #Check if stochastics has reached above overbough region
    kvalue = recorddf[['%K','%D']].tail(1).iloc[0]['%K']
    dvalue = recorddf[['%K','%D']].tail(1).iloc[0]['%D']
    #if(kvalue > 90 and dvalue > 90):
        #print(codekey,": Stochastic values are greater than 90")
    
    #print(recorddf)
    
#---------------------------Take Screenshots of Stocks Found---------------------------

#getScreenshots(dict_stocks_found,links_codes)

#-----------------------End of Take Screenshots of Stocks Found------------------------

#-----------------------Prepare HTML File-------------------------------

createHTML(dict_stocks_found,desc_stocks_lists,links_codes)

#-------------------Close Prepare HTML File-----------------------------

#------------Bollinger Bands Strategies--------------
print("\nUpper Bollinger Bands Breakout:")
print(*upper_bb_breakout,sep=", ")
print("\nLower Bollinger Bands Breakout:")
print(*lower_bb_breakout,sep=", ")
print("\nBBs Converging but Candle Open and Close are ABOVE the Upper Bollinger Bands:")
print(*bb_conv_candle_oc_above_ubb,sep=", ")
print("\nBBs Converging but Candle Open and Close are BELOW the Lower Bollinger Bands:")
print(*bb_conv_candle_oc_below_lbb,sep=", ")
print("\nBBs Converging but Candle Close is above the Upper Bollinger Bands:")
print(*bb_conv_candle_close_above_ubb,sep=", ")
print("\nBBs Converging but Candle Close is below the Lower Bollinger Bands:")
print(*bb_conv_candle_close_below_lbb,sep=", ")
print("\nBBs are NOT converging but Candle Open and Close are above the Upper Bollinger Bands:")
print(*bb_not_conv_candle_oc_above_ubb,sep=", ")
print("\nBBs are NOT converging but Candle Open and Close are below the Lower Bollinger Bands:")
print(*bb_not_conv_candle_oc_below_lbb,sep=", ")
print("\nBBs are NOT converging but Candle Close is above the Upper Bollinger Bands:")
print(*bb_not_conv_candle_close_above_ubb,sep=", ")
print("\nBBs are NOT converging but Candle Close is below the Lower Bollinger Bands:")
print(*bb_not_conv_candle_close_below_lbb,sep=", ")
#-----------------------Trend------------------------
print("\nStrong Uptrend Stocks but Candlestick Closed below 7MA:")
print(*strong_uptrend_stocks_closed_below_7MA, sep=", ")
print("\nUptrend Stocks but Candlestick Closed below 7MA:")
print(*uptrend_stocks_closed_below_7MA, sep=", ")
print("\nStrong Downtrend Stocks but Candlestick Closed above 7MA:")
print(*strong_downtrend_stocks_closed_above_7MA, sep=", ")
print("\nDowntrend Stocks but Candlestick Closed above 7MA:")
print(*downtrend_stocks_closed_above_7MA, sep=", ")
print("\nStrong Uptrend Stocks:")
print(*strong_uptrend_stocks, sep=", ")
print("\nUptrend Stocks:")
print(*uptrend_stocks, sep=", ")
print("\nStrong Downtrend Stocks:")
print(*strong_downtrend_stocks, sep=", ")
print("\nDowntrend Stocks:")
print(*downtrend_stocks, sep=", ")
print("\nUptrend Settled Stocks:")
print(*uptrend_settled_stocks, sep=", ")
print("\nDowntrend Settled Stocks:")
print(*downtrend_settled_stocks, sep=", ")
print("\nRange Market Stocks:")
print(*range_stocks, sep=", ")
print("\nTimed out stocks:")
print(*timed_out, sep=", ")
print("\n",datetime.datetime.now())